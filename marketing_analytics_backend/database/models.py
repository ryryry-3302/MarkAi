"""
Database models for the Marketing Analytics Backend.
Defines SQLAlchemy models for storing social media data and analytics results.
"""
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import json

db = SQLAlchemy()

class Business(db.Model):
    """Model representing a business entity."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    industry = db.Column(db.String(50))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    social_accounts = db.relationship('SocialAccount', backref='business', lazy=True)
    insights = db.relationship('Insight', backref='business', lazy=True)
    
    def __repr__(self):
        return f'<Business {self.name}>'

class SocialAccount(db.Model):
    """Model representing a social media account for a business."""
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey('business.id'), nullable=False)
    platform = db.Column(db.String(20), nullable=False)  # instagram, youtube, tiktok
    account_id = db.Column(db.String(100), nullable=False)
    account_name = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    metrics = db.relationship('SocialMetric', backref='social_account', lazy=True)
    
    def __repr__(self):
        return f'<SocialAccount {self.platform}:{self.account_name}>'

class SocialMetric(db.Model):
    """Model for storing social media metrics."""
    id = db.Column(db.Integer, primary_key=True)
    social_account_id = db.Column(db.Integer, db.ForeignKey('social_account.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Common metrics across platforms
    followers = db.Column(db.Integer)
    likes = db.Column(db.Integer)
    comments = db.Column(db.Integer)
    shares = db.Column(db.Integer)
    views = db.Column(db.Integer)
    
    # Platform-specific metrics stored as JSON
    platform_data = db.Column(db.Text)  # JSON string with platform-specific metrics
    
    def set_platform_data(self, data_dict):
        """Serialize platform-specific data to JSON."""
        self.platform_data = json.dumps(data_dict)
    
    def get_platform_data(self):
        """Deserialize platform-specific data from JSON."""
        if self.platform_data:
            return json.loads(self.platform_data)
        return {}
    
    def __repr__(self):
        return f'<SocialMetric {self.social_account_id} at {self.timestamp}>'

class Content(db.Model):
    """Model for storing content details from social media posts."""
    id = db.Column(db.Integer, primary_key=True)
    social_account_id = db.Column(db.Integer, db.ForeignKey('social_account.id'), nullable=False)
    content_id = db.Column(db.String(100), nullable=False)  # Platform's content ID
    content_type = db.Column(db.String(20))  # post, video, story, etc.
    title = db.Column(db.String(200))
    description = db.Column(db.Text)
    url = db.Column(db.String(255))
    thumbnail_url = db.Column(db.String(255))
    published_at = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Content metrics
    likes = db.Column(db.Integer, default=0)
    comments = db.Column(db.Integer, default=0)
    shares = db.Column(db.Integer, default=0)
    views = db.Column(db.Integer, default=0)
    
    # Additional metadata stored as JSON
    content_metadata = db.Column(db.Text)  # JSON string with additional metadata
    
    def set_content_metadata(self, data_dict):
        """Serialize metadata to JSON."""
        self.content_metadata = json.dumps(data_dict)
    
    def get_content_metadata(self):
        """Deserialize metadata from JSON."""
        if self.content_metadata:
            return json.loads(self.content_metadata)
        return {}
    
    def __repr__(self):
        return f'<Content {self.content_type}:{self.content_id}>'

class Insight(db.Model):
    """Model for storing insights generated by Gemini."""
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey('business.id'), nullable=False)
    insight_type = db.Column(db.String(50))  # engagement, trend, product, pricing, etc.
    title = db.Column(db.String(200))
    description = db.Column(db.Text)
    confidence_score = db.Column(db.Float)  # 0.0 to 1.0
    generated_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Raw data from Gemini stored as JSON
    raw_data = db.Column(db.Text)  # JSON string with raw insight data
    
    def set_raw_data(self, data_dict):
        """Serialize raw data to JSON."""
        self.raw_data = json.dumps(data_dict)
    
    def get_raw_data(self):
        """Deserialize raw data from JSON."""
        if self.raw_data:
            return json.loads(self.raw_data)
        return {}
    
    def __repr__(self):
        return f'<Insight {self.insight_type}:{self.title}>'
